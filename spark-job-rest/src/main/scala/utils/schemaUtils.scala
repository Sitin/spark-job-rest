package utils

import org.slf4j.LoggerFactory
import persistence.schema._
import persistence.slickWrapper.Driver._
import persistence.slickWrapper.Driver.api._
import slick.jdbc.meta.MTable

import scala.concurrent.Await
import scala.concurrent.duration._

object schemaUtils {
  val log = LoggerFactory.getLogger(getClass)

  /**
   * Synchronously creates table if it doesn't exist.
   *
   * @param db database connection
   * @param tag table tag name
   * @param schema table schema to be applied
   * @param duration timeout duration
   * @param resetTable whether table should be recreated
   *
   * @todo Now when `resetTable` is true it fails trying to delete table with foreign key.
   */
  private def setupTable(db: Database, tag: String, schema: SchemaDescription,
                         duration: Duration = 1.seconds, resetTable: Boolean = false): Unit = {
    val tableMetaFuture = db.run(MTable.getTables(tag))
    val tableExists = Await.result(tableMetaFuture, duration).toList.nonEmpty

    if (!tableExists || resetTable) {
      val command = DBIO.seq(
        // Drop table if exists
        if (tableExists) schema.drop else DBIO.seq(),
        // Create table
        schema.create
      )
      // Create or reset table
      Await.result(db.run(command), duration)
      // Report table creation
      log.info(s"Table `$tag` created.")
    } else
      // Report to database log that table is up to date
      log.info(s"Table `$tag` is up to date.")
  }

  /**
   * Creates database schema.
   * @param db database connection
   * @param duration timeout duration
   * @param resetSchema whether schema should be recreated
   */
  def setupDatabaseSchema(db: Database, duration: Duration = 1.seconds, resetSchema: Boolean = false): Unit = {
    log.info("Initialising database schema.")
    // Setup tables
    for ((tableName, schema) <- autoGeneratedTables)
      setupTable(db, tableName, schema, duration, resetSchema)
  }
}
